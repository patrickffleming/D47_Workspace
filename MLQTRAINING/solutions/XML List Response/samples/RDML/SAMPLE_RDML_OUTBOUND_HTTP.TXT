FUNCTION   OPTIONS(*DIRECT)

* The following fields should be defined in the dictionary
* DEFINE     FIELD(#JSMSTS) TYPE(*CHAR) LENGTH(20)
* DEFINE     FIELD(#JSMMSG) TYPE(*CHAR) LENGTH(255)
* DEFINE     FIELD(#JSMCMD) TYPE(*CHAR) LENGTH(255)

* The following fields are used by the xml binding map
* #DEPTDESC
* #DEPTMENT
* #STD_TEXTS

* The following fragments are used by the xml binding map
GROUP_BY   NAME(#DEPARTMENTLISTRESPONSE) FIELDS(#STD_TEXTS)

* The following lists are used by the xml binding map
DEF_LIST   NAME(#DEPARTMENT) FIELDS(#DEPTMENT #DEPTDESC) TYPE(*WORKING)

* Open service
USE        BUILTIN(JSM_OPEN) TO_GET(#JSMSTS #JSMMSG)
EXECUTE    SUBROUTINE(CHECK) WITH_PARMS(#JSMSTS #JSMMSG)

* Load service
CHANGE     FIELD(#JSMCMD) TO('SERVICE_LOAD SERVICE(HTTPOutboundXMLBindService) TRACE(*YES)')
USE        BUILTIN(JSM_COMMAND) WITH_ARGS(#JSMCMD) TO_GET(#JSMSTS #JSMMSG)
EXECUTE    SUBROUTINE(CHECK) WITH_PARMS(#JSMSTS #JSMMSG)

* Bind service to create HTTP request content
CHANGE     FIELD(#JSMCMD) TO('BIND SERVICE(MLQPRO05_RESPONSE) TYPE(*OUTBOUND)')
USE        BUILTIN(JSM_COMMAND) WITH_ARGS(#JSMCMD) TO_GET(#JSMSTS #JSMMSG)
EXECUTE    SUBROUTINE(CHECK) WITH_PARMS(#JSMSTS #JSMMSG)

* Set fragment - DEPARTMENTLISTRESPONSE
CHANGE     FIELD(#JSMCMD) TO('SET FRAGMENT(DEPARTMENTLISTRESPONSE) SERVICE_EXCHANGE(*FIELD)')
USE        BUILTIN(JSM_COMMAND) WITH_ARGS(#JSMCMD) TO_GET(#JSMSTS #JSMMSG)
EXECUTE    SUBROUTINE(CHECK) WITH_PARMS(#JSMSTS #JSMMSG)

* Set list - DEPARTMENT
CHANGE     FIELD(#JSMCMD) TO('SET LIST(DEPARTMENT) SERVICE_LIST(DEPTMENT,DEPTDESC)')
USE        BUILTIN(JSM_COMMAND) WITH_ARGS(#JSMCMD) TO_GET(#JSMSTS #JSMMSG #DEPARTMENT)
EXECUTE    SUBROUTINE(CHECK) WITH_PARMS(#JSMSTS #JSMMSG)

* Write content
CHANGE     FIELD(#JSMCMD) TO('WRITE INDENT(*YES) BINDTRACE(*YES)')
USE        BUILTIN(JSM_COMMAND) WITH_ARGS(#JSMCMD) TO_GET(#JSMSTS #JSMMSG)
EXECUTE    SUBROUTINE(CHECK) WITH_PARMS(#JSMSTS #JSMMSG)

* Close binding
CHANGE     FIELD(#JSMCMD) TO('CLOSE')
USE        BUILTIN(JSM_COMMAND) WITH_ARGS(#JSMCMD) TO_GET(#JSMSTS #JSMMSG)
EXECUTE    SUBROUTINE(CHECK) WITH_PARMS(#JSMSTS #JSMMSG)

* Send HTTP request content
CHANGE     FIELD(#JSMCMD) TO('SEND HOST( <<<host:port>>> ) URL( <<<url>> )')
USE        BUILTIN(JSM_COMMAND) WITH_ARGS(#JSMCMD) TO_GET(#JSMSTS #JSMMSG)
EXECUTE    SUBROUTINE(CHECK) WITH_PARMS(#JSMSTS #JSMMSG)

* Bind service to read HTTP response content
CHANGE     FIELD(#JSMCMD) TO('BIND SERVICE( <<<inbound.class>>> ) TYPE(*INBOUND) BINDTRACE(*YES)')
USE        BUILTIN(JSM_COMMAND) WITH_ARGS(#JSMCMD) TO_GET(#JSMSTS #JSMMSG)
EXECUTE    SUBROUTINE(CHECK) WITH_PARMS(#JSMSTS #JSMMSG)


* <<< Inbound binding logic goes here >>>


* Unload service
USE        BUILTIN(JSM_COMMAND) WITH_ARGS('SERVICE_UNLOAD') TO_GET(#JSMSTS #JSMMSG)
EXECUTE    SUBROUTINE(CHECK) WITH_PARMS(#JSMSTS #JSMMSG)

* Close service
USE        BUILTIN(JSM_CLOSE) TO_GET(#JSMSTS #JSMMSG)
EXECUTE    SUBROUTINE(CHECK) WITH_PARMS(#JSMSTS #JSMMSG)

* Check routine
SUBROUTINE NAME(CHECK) PARMS((#JSMSTS *RECEIVED) (#JSMMSG *RECEIVED))
IF         COND('#JSMSTS *NE OK')
USE        BUILTIN(JSM_CLOSE) TO_GET(#JSMSTS #JSMMSG)
MENU       MSGTXT('Java service error has occured')
ENDIF
ENDROUTINE
